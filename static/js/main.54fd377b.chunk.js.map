{"version":3,"sources":["ListTasks/ListTasks.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","tasksList","tasks","map","task","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","onClick","deleteTask","duration","easing","library","add","faTrash","App","inputHandle","event","setState","currentTask","Date","now","addTask","preventDefault","newTask","state","tasksArr","filteredTasks","filter","placeholder","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qTAgCeA,EA5BG,SAACC,GAEf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GACxB,OACI,yBAAKC,UAAU,YAAYC,IAAKF,EAAKE,KACjC,2BACI,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SAAU,SAACC,GAAD,OAAOZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAC1D,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QACtCC,QAAS,kBAAMhB,EAAMiB,WAAWb,EAAKE,cAM7D,OACI,yBAAKD,UAAU,aACX,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAC3BlB,K,eCpBjBmB,IAAQC,IAAIC,K,IAmGGC,E,kDA7Fb,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAaRwB,YAAc,SAACC,GAEb,EAAKC,SAAS,CACZC,YAAa,CACXjB,KAAMe,EAAMX,OAAOL,MACnBH,IAAKsB,KAAKC,UAnBG,EA0BnBC,QAAU,SAACL,GACTA,EAAMM,iBAEN,IAAMC,EAAU,EAAKC,MAAMN,YAE3B,GAAgB,KAAZK,EAAgB,CAElB,IAAME,EAAQ,sBAAO,EAAKD,MAAM/B,OAAlB,CAAyB8B,IAEvC,EAAKN,SAAS,CACZxB,MAAOgC,EACPP,YAAa,CACXjB,KAAM,GACNJ,IAAK,QAvCM,EAgDnBW,WAAa,SAACX,GACZ,IAAM6B,EAAgB,EAAKF,MAAM/B,MAAMkC,QAAO,SAAAhC,GAAI,OAAIA,EAAKE,MAAQA,KACnE,EAAKoB,SAAS,CACZxB,MAAOiC,KAnDQ,EAwDnBtB,UAAY,SAACH,EAAMJ,GACjB,IAAM4B,EAAW,EAAKD,MAAM/B,MAC5BgC,EAAS/B,KAAI,SAAAC,GACPA,EAAKE,MAAQA,IACfF,EAAKM,KAAOA,MAIhB,EAAKgB,SAAS,CACZxB,MAAOgC,KA9DT,EAAKD,MAAQ,CACX/B,MAAO,GACPyB,YAAa,CACXjB,KAAM,GACNJ,IAAK,KAPQ,E,qDAsEjB,OACE,yBAAKD,UAAU,OACb,gCACE,0BAAMG,GAAG,cACP,2BAAOD,KAAK,OACV8B,YAAY,iBACZ5B,MAAO6B,KAAKL,MAAMN,YAAYjB,KAC9BC,SAAU2B,KAAKd,cAEjB,4BAAQjB,KAAK,SAASS,QAASsB,KAAKR,SAApC,SAGJ,kBAAC,EAAD,CACE5B,MAAOoC,KAAKL,MAAM/B,MAClBe,WAAYqB,KAAKrB,WACjBJ,UAAWyB,KAAKzB,iB,GAxFR0B,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.54fd377b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ListTasks.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nconst ListItems = (props) => {\r\n\r\n    const tasks = props.tasks;\r\n    const tasksList = tasks.map(task => {\r\n        return (\r\n            <div className='ListTasks' key={task.key}>\r\n                <p>\r\n                    <input type='text'\r\n                        id={task.key}\r\n                        value={task.text}\r\n                        onChange={(e) => props.setUpdate(e.target.value, task.key)} />\r\n                    <span>\r\n                        <FontAwesomeIcon className='faicons' icon='trash'\r\n                            onClick={() => props.deleteTask(task.key)} />\r\n                    </span>\r\n                </p>\r\n\r\n            </div>)\r\n    })\r\n    return (\r\n        <div className='ListTasks'>\r\n            <FlipMove duration={300} easing='ease-in-out'>\r\n                {tasksList}\r\n            </FlipMove>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListItems;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListTasks from './ListTasks/ListTasks';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\n\nclass App extends Component {\n\n  // Initial state\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tasks: [],\n      currentTask: {\n        text: '',\n        key: ''\n      }\n    };\n\n  }\n\n  // Input text handler\n  inputHandle = (event) => {\n\n    this.setState({\n      currentTask: {\n        text: event.target.value,\n        key: Date.now()\n      }\n    });\n\n  }\n\n  // Add task event handler\n  addTask = (event) => {\n    event.preventDefault();\n\n    const newTask = this.state.currentTask;\n\n    if (newTask !== '') {\n\n      const tasksArr = [...this.state.tasks, newTask];\n\n      this.setState({\n        tasks: tasksArr,\n        currentTask: {\n          text: '',\n          key: ''\n        }\n      });\n\n    }\n  }\n\n  // Delete task\n\n  deleteTask = (key) => {\n    const filteredTasks = this.state.tasks.filter(task => task.key !== key);\n    this.setState({\n      tasks: filteredTasks\n    });\n  }\n\n  // Edit task\n  setUpdate = (text, key) => {\n    const tasksArr = this.state.tasks;\n    tasksArr.map(task => {\n      if (task.key === key) {\n        task.text = text;\n      }\n    });\n\n    this.setState({\n      tasks: tasksArr\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <header>\n          <form id='to-do-form'>\n            <input type='text'\n              placeholder='Enter the task'\n              value={this.state.currentTask.text}\n              onChange={this.inputHandle}\n            />\n            <button type='submit' onClick={this.addTask}>Add</button>\n          </form>\n        </header>\n        <ListTasks\n          tasks={this.state.tasks}\n          deleteTask={this.deleteTask}\n          setUpdate={this.setUpdate}\n        />\n      </div>\n    )\n\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}